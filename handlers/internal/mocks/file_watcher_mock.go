// Code generated by MockGen. DO NOT EDIT.
// Source: file_watcher.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=../mocks/file_watcher_mock.go -source=file_watcher.go -mock_names=Watcher=MockWatcher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	filesystem "github.com/k-lb/entrypoint-framework/handlers/internal/filesystem"
	gomock "go.uber.org/mock/gomock"
)

// MockWatcher is a mock of Watcher interface.
type MockWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherMockRecorder
	isgomock struct{}
}

// MockWatcherMockRecorder is the mock recorder for MockWatcher.
type MockWatcherMockRecorder struct {
	mock *MockWatcher
}

// NewMockWatcher creates a new mock instance.
func NewMockWatcher(ctrl *gomock.Controller) *MockWatcher {
	mock := &MockWatcher{ctrl: ctrl}
	mock.recorder = &MockWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcher) EXPECT() *MockWatcherMockRecorder {
	return m.recorder
}

// GetEvent mocks base method.
func (m *MockWatcher) GetEvent() *filesystem.WatcherEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent")
	ret0, _ := ret[0].(*filesystem.WatcherEvent)
	return ret0
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockWatcherMockRecorder) GetEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockWatcher)(nil).GetEvent))
}

// GetNotificationChannel mocks base method.
func (m *MockWatcher) GetNotificationChannel() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationChannel")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// GetNotificationChannel indicates an expected call of GetNotificationChannel.
func (mr *MockWatcherMockRecorder) GetNotificationChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationChannel", reflect.TypeOf((*MockWatcher)(nil).GetNotificationChannel))
}

// Stop mocks base method.
func (m *MockWatcher) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockWatcherMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockWatcher)(nil).Stop))
}
